// ---------------------------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by LinqToDB scaffolding tool (https://github.com/linq2db/linq2db).
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ---------------------------------------------------------------------------------------------------

using LinqToDB;
using LinqToDB.Data;
using LinqToDB.Mapping;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

#pragma warning disable 1573, 1591

namespace RadfordHr.Data.Models
{
	public partial class RadfordHrDbContext : DataConnection
	{
		public RadfordHrDbContext()
		{
			InitDataContext();
		}

		public RadfordHrDbContext(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		public RadfordHrDbContext(DataOptions<RadfordHrDbContext> options)
			: base(options.Options)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		public ITable<Staff> Staff => this.GetTable<Staff>();
	}

	[Table("Staff")]
	public partial class Staff
	{
		[Column("Id"             , IsPrimaryKey = true , IsIdentity = true, SkipOnInsert = true, SkipOnUpdate = true)] public int    Id              { get; set; } // int
		[Column("StaffType"      , CanBeNull    = false                                                             )] public string StaffType       { get; set; } // varchar(8)
		[Column("Title"          , CanBeNull    = false                                                             )] public string Title           { get; set; } // varchar(4)
		[Column("FirstName"      , CanBeNull    = false                                                             )] public string FirstName       { get; set; } // varchar(100)
		[Column("LastName"       , CanBeNull    = false                                                             )] public string LastName        { get; set; } // varchar(150)
		[Column("MiddleInitial"                                                                                     )] public string MiddleInitial   { get; set; } // varchar(5)
		[Column("HomePhone"                                                                                         )] public string HomePhone       { get; set; } // varchar(15)
		[Column("CellPhone"                                                                                         )] public string CellPhone       { get; set; } // varchar(15)
		[Column("OfficeExtension"                                                                                   )] public string OfficeExtension { get; set; } // varchar(10)
		[Column("IRDNumber"                                                                                         )] public string IrdNumber       { get; set; } // varchar(20)
		[Column("Status"         , CanBeNull    = false                                                             )] public string Status          { get; set; } // varchar(8)
		[Column("ManagerId"                                                                                         )] public int?   ManagerId       { get; set; } // int
	}

	public static partial class ExtensionMethods
	{
		#region Table Extensions
		public static Staff Find(this ITable<Staff> table, int id)
		{
			return table.FirstOrDefault(e => e.Id == id);
		}

		public static Task<Staff> FindAsync(this ITable<Staff> table, int id, CancellationToken cancellationToken = default)
		{
			return table.FirstOrDefaultAsync(e => e.Id == id, cancellationToken);
		}
		#endregion

		#region Stored Procedures
		#region GetStaff
		public static IEnumerable<GetStaffResult> GetStaff(this RadfordHrDbContext dataConnection)
		{
			return dataConnection.QueryProc<GetStaffResult>("[GetStaff]");
		}

		public static Task<IEnumerable<GetStaffResult>> GetStaffAsync(this RadfordHrDbContext dataConnection, CancellationToken cancellationToken = default)
		{
			return dataConnection.QueryProcAsync<GetStaffResult>("[GetStaff]", cancellationToken);
		}

		public partial class GetStaffResult
		{
			[Column("Id"                                )] public int    Id              { get; set; }
			[Column("StaffType"      , CanBeNull = false)] public string StaffType       { get; set; }
			[Column("Title"          , CanBeNull = false)] public string Title           { get; set; }
			[Column("FirstName"      , CanBeNull = false)] public string FirstName       { get; set; }
			[Column("LastName"       , CanBeNull = false)] public string LastName        { get; set; }
			[Column("MiddleInitial"                     )] public string MiddleInitial   { get; set; }
			[Column("HomePhone"                         )] public string HomePhone       { get; set; }
			[Column("CellPhone"                         )] public string CellPhone       { get; set; }
			[Column("OfficeExtension"                   )] public string OfficeExtension { get; set; }
			[Column("IRDNumber"                         )] public string IrdNumber       { get; set; }
			[Column("Status"         , CanBeNull = false)] public string Status          { get; set; }
			[Column("ManagerId"                         )] public int?   ManagerId       { get; set; }
		}
		#endregion

		#region UpsertStaff
		public static int UpsertStaff(this RadfordHrDbContext dataConnection, int? id, string staffType, string title, string firstName, string lastName, string middleInitial, string homePhone, string cellPhone, string officeExtension, string irdNumber, string status, int? managerId)
		{
			var parameters = new []
			{
				new DataParameter("@Id", id, DataType.Int32),
				new DataParameter("@StaffType", staffType, DataType.VarChar)
				{
					Size = 8
				},
				new DataParameter("@Title", title, DataType.VarChar)
				{
					Size = 4
				},
				new DataParameter("@FirstName", firstName, DataType.VarChar)
				{
					Size = 100
				},
				new DataParameter("@LastName", lastName, DataType.VarChar)
				{
					Size = 150
				},
				new DataParameter("@MiddleInitial", middleInitial, DataType.VarChar)
				{
					Size = 5
				},
				new DataParameter("@HomePhone", homePhone, DataType.VarChar)
				{
					Size = 15
				},
				new DataParameter("@CellPhone", cellPhone, DataType.VarChar)
				{
					Size = 15
				},
				new DataParameter("@OfficeExtension", officeExtension, DataType.VarChar)
				{
					Size = 10
				},
				new DataParameter("@IRDNumber", irdNumber, DataType.VarChar)
				{
					Size = 20
				},
				new DataParameter("@Status", status, DataType.VarChar)
				{
					Size = 8
				},
				new DataParameter("@ManagerId", managerId, DataType.Int32)
			};
			return dataConnection.ExecuteProc("[UpsertStaff]", parameters);
		}

		public static Task<int> UpsertStaffAsync(this RadfordHrDbContext dataConnection, int? id, string staffType, string title, string firstName, string lastName, string middleInitial, string homePhone, string cellPhone, string officeExtension, string irdNumber, string status, int? managerId, CancellationToken cancellationToken = default)
		{
			var parameters = new []
			{
				new DataParameter("@Id", id, DataType.Int32),
				new DataParameter("@StaffType", staffType, DataType.VarChar)
				{
					Size = 8
				},
				new DataParameter("@Title", title, DataType.VarChar)
				{
					Size = 4
				},
				new DataParameter("@FirstName", firstName, DataType.VarChar)
				{
					Size = 100
				},
				new DataParameter("@LastName", lastName, DataType.VarChar)
				{
					Size = 150
				},
				new DataParameter("@MiddleInitial", middleInitial, DataType.VarChar)
				{
					Size = 5
				},
				new DataParameter("@HomePhone", homePhone, DataType.VarChar)
				{
					Size = 15
				},
				new DataParameter("@CellPhone", cellPhone, DataType.VarChar)
				{
					Size = 15
				},
				new DataParameter("@OfficeExtension", officeExtension, DataType.VarChar)
				{
					Size = 10
				},
				new DataParameter("@IRDNumber", irdNumber, DataType.VarChar)
				{
					Size = 20
				},
				new DataParameter("@Status", status, DataType.VarChar)
				{
					Size = 8
				},
				new DataParameter("@ManagerId", managerId, DataType.Int32)
			};
			return dataConnection.ExecuteProcAsync("[UpsertStaff]", cancellationToken, parameters);
		}
		#endregion
		#endregion
	}
}
